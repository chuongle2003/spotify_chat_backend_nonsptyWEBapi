@startuml Play Song Sequence

actor User
participant "Client App" as Client
participant "API Server" as API
participant "SongViewSet" as SongView
participant "Permission Check" as Auth
participant "Database" as DB
participant "File Storage" as Storage

== Authentication (if required) ==
User -> Client: Login (if not already logged in)
Client -> API: Send credentials
API -> DB: Verify user
DB --> API: Return user data
API --> Client: Return auth token
Client -> User: Show logged in status

== Song Selection ==
User -> Client: Search or browse songs
Client -> API: GET /api/songs/ or /api/trending/
API -> DB: Query songs
DB --> API: Return song list
API --> Client: Return song data
Client -> User: Display song list

User -> Client: Select song to play
Client -> API: GET /api/songs/{id}/

API -> SongView: retrieve() method
SongView -> DB: Query song details
DB --> SongView: Return song data
SongView --> API: Return song data
API --> Client: Return song details
Client -> User: Display song details

== Play Song Process ==
User -> Client: Click play button
Client -> API: POST /api/songs/{id}/play/
API -> Auth: Check if authenticated

alt User is authenticated
    Auth --> API: User authorized
    API -> SongView: play() method
    SongView -> DB: Get song
    DB --> SongView: Return song data
    
    SongView -> DB: Increment play_count
    DB --> SongView: Confirm update
    
    SongView -> DB: Create SongPlayHistory record
    DB --> SongView: Confirm record created
    
    SongView -> Storage: Request audio file
    Storage --> SongView: Return audio file or streaming URL
    SongView --> API: Return audio streaming data
    API --> Client: Stream audio data
    Client -> User: Play song audio
else User is guest
    Auth --> API: Anonymous access
    API -> SongView: play() method
    SongView -> DB: Get song
    DB --> SongView: Return song data
    
    SongView -> Storage: Request audio file
    Storage --> SongView: Return audio file or streaming URL
    SongView --> API: Return audio streaming data
    API --> Client: Stream audio data
    Client -> User: Play song audio
    note right: No play history recorded\nNo play count increment
end

== Additional Features (for authenticated users) ==
User -> Client: Like song
Client -> API: POST /api/songs/{id}/like/
API -> Auth: Check if authenticated
Auth --> API: User authorized
API -> SongView: like() method
SongView -> DB: Update favorites & likes_count
DB --> SongView: Confirm update
SongView --> API: Return updated status
API --> Client: Confirm like action
Client -> User: Update like button state

== Recommendations Update ==
note over API, DB
  After playing songs, recommendations are updated
  based on play history and preferences
end note

API -> DB: Query user play history
DB --> API: Return history data
API -> DB: Update user recommendations
DB --> API: Confirm update

@enduml 